unit MainFormU;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, MVCFramework.ActiveRecord,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.PG, FireDAC.Phys.PGDef, FireDAC.VCLUI.Wait,
  Data.DB, FireDAC.Comp.Client, Vcl.StdCtrls;

type
  TMainForm = class(TForm)
    FDConnection1: TFDConnection;
    Button1: TButton;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm}


uses EntitiesU;

procedure TMainForm.Button1Click(Sender: TObject);
var
  lCustomer: TCustomer;
  lCustID: Integer;
begin
  lCustomer := TCustomer.Create;
  try
    lCustomer.FirstName := 'Daniele';
    lCustomer.LastName := 'Teti';
    lCustomer.DateOfBirth := EncodeDate(1979, 11, 4);
    { let's insert a new customer }
    lCustomer.Insert;
    { retrieve the autogenerated primary key of the newly inserted customer }
    lCustID := lCustomer.ID;
  finally
    lCustomer.Free;
  end;

  { load the customer by primary key }
  lCustomer := TMVCActiveRecord.GetByPK<TCustomer>(lCustID);
  try
    { update a fields }
    lCustomer.Note := 'It''s a developer and a poor guitarist...';
    { update the customer }
    lCustomer.Update;
  finally
    lCustomer.Free;
  end;

  { try to insert an invalid customer }
  lCustomer := TCustomer.Create;
  try
    lCustomer.FirstName := ''; // this will raise a validation exception
    lCustomer.LastName := 'Teti';
    lCustomer.DateOfBirth := EncodeDate(1979, 11, 4);
    { automatic validation happend here - expect an exception }
    lCustomer.Insert;
  finally
    lCustomer.Free;
  end;
end;

procedure TMainForm.FormCreate(Sender: TObject);
begin
  ActiveRecordConnectionsRegistry.AddDefaultConnection(FDConnection1);
end;

procedure TMainForm.FormDestroy(Sender: TObject);
begin
  ActiveRecordConnectionsRegistry.RemoveDefaultConnection;
end;

end.
