unit EntitiesU;

interface

uses
  MVCFramework.ActiveRecord,
  MVCFramework.Nullables;

type

  [MVCTable('customers')]
  TCustomer = class(TMVCActiveRecord)
  private
    [MVCTableField('id', [foPrimaryKey, foAutoGenerated])]
    fID: Integer;
    [MVCTableField('first_name')]
    fFirstName: string;
    [MVCTableField('last_name')]
    fLastName: string;
    [MVCTableField('dob')]
    fDateOfBirth: TDate;
    [MVCTableField('note')]
    fNote: NullableString;
  protected
    function GetFullName: string;
    procedure OnBeforeInsertOrUpdate; override;
  public
    property ID: Integer read fID write fID;
    property FirstName: string read fFirstName write fFirstName;
    property LastName: string read fLastName write fLastName;
    property DateOfBirth: TDate read fDateOfBirth write fDateOfBirth;
    property Note: NullableString read fNote write fNote;
    property FullName: string read GetFullName;
  end;

implementation

uses
  System.SysUtils,
  {here you can use the SQLGenerator for your RDBMS engine
    among those supported by the TMVCActiveRecord framework}
  MVCFramework.SQLGenerators.PostgreSQL;

{ TCustomer }

function TCustomer.GetFullName: string;
begin
  Result := fFirstName + ' ' + fLastName;
end;

procedure TCustomer.OnBeforeInsertOrUpdate;
begin
  inherited;
  if fFirstName.Trim.IsEmpty or fLastName.Trim.IsEmpty then
  begin
    raise Exception.Create('First name and last name are required');
  end;
end;

end.
