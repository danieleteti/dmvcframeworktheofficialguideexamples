unit Controllers.CustomersU;

interface

uses
  MVCFramework,
  MVCFramework.Commons;

type

  [MVCPath('/api/customers')]
  TCustomersController = class(TMVCController)
  protected
    procedure OnBeforeAction(AContext: TWebContext; const AActionName: string; var AHandled: Boolean); override;
    procedure OnAfterAction(AContext: TWebContext; const AActionName: string); override;
  public

    [MVCPath]
    [MVCDoc('Retrieves all the customers')]
    [MVCHTTPMethods([httpGET])]
    [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
    procedure GetCustomers;

    [MVCPath('/($ID)')]
    [MVCHTTPMethods([httpGET])]
    [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
    procedure GetCustomerByID(const ID: Integer);

    [MVCPath]
    [MVCDoc('Creates a customer')]
    [MVCHTTPMethods([httpPOST, httpPUT])]
    [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
    procedure CreateCustomers;

    [MVCPath('/($ID)')]
    [MVCDoc('Updates a customer')]
    [MVCHTTPMethods([httpPUT])]
    [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
    [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
    procedure UpdateCustomerByID(const ID: Integer);

    [MVCPath('/($ID)')]
    [MVCDoc('Deletes a customer')]
    [MVCHTTPMethods([httpDELETE])]
    procedure DeleteCustomerByID(const ID: Integer);

  end;

implementation

uses
  System.SysUtils,
  Data.DB,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param,
  MVCFramework.Logger,
  MVCFramework.ActiveRecord,
  MVCFramework.Serializer.Commons,
  MVCFramework.Serializer.JsonDataObjects,
  MVCFramework.SQLGenerators.PostgreSQL,
  MVCFramework.DataSet.Utils,
  JsonDataObjects,
  EntitiesU,
  System.Generics.Collections;

{ TCustomersController }

procedure TCustomersController.CreateCustomers;
var
  lCustomer: TCustomer;
begin
  lCustomer := Context.Request.BodyAs<TCustomer>;
  try
    lCustomer.Insert;
    Render201Created('/api/customers/' + lCustomer.ID.ToString);
  finally
    lCustomer.Free;
  end;
end;

procedure TCustomersController.DeleteCustomerByID(const ID: Integer);
var
  lCustomer: TCustomer;
begin
  lCustomer := TMVCActiveRecord.GetByPK<TCustomer>(ID);
  try
    if Assigned(lCustomer) then
    begin
      lCustomer.Delete;
    end;
  finally
    lCustomer.Free;
  end;
  Render204NoContent('', 'Customer deleted');
end;

procedure TCustomersController.GetCustomerByID(const ID: Integer);
begin
  Render(TMVCActiveRecord.GetByPK<TCustomer>(ID));
end;

procedure TCustomersController.GetCustomers;
begin
  Render<TCustomer>(TMVCActiveRecord.All<TCustomer>);
end;

procedure TCustomersController.OnBeforeAction(AContext: TWebContext; const AActionName: string; var AHandled: Boolean);
var
  lConn: TFDConnection;
begin
  inherited;
  lConn := TFDConnection.Create(nil);
  lConn.ConnectionDefName := 'municipal_library';
  ActiveRecordConnectionsRegistry.AddDefaultConnection(lConn, True);
end;

{ return the updated object }
// procedure TCustomersController.UpdateCustomerByID(const ID: Integer);
// var
// lCustomer: TCustomer;
// begin
// lCustomer := TMVCActiveRecord.GetByPK<TCustomer>(ID);
// try
// Context.Request.BodyFor<TCustomer>(lCustomer);
// lCustomer.Update;
// Render(HTTP_STATUS.OK, TMVCObjectResponse.Create(lCustomer), False);
// finally
// lCustomer.Free;
// end;
// end;

procedure TCustomersController.UpdateCustomerByID(const ID: Integer);
var
  lCustomer: TCustomer;
begin
  lCustomer := TMVCActiveRecord.GetByPK<TCustomer>(ID, False);
  if Assigned(lCustomer) then
  begin
    try
      Context.Request.BodyFor<TCustomer>(lCustomer);
      lCustomer.Update;
      Render204NoContent('', 'Customer Updated');
    finally
      lCustomer.Free;
    end;
  end
  else
  begin
    { in case you want to create a customer also using a provided key }
    lCustomer := Context.Request.BodyAs<TCustomer>;
    try
      Context.Request.BodyFor<TCustomer>(lCustomer);
      lCustomer.PrimaryKeyIsAutogenerated := False;
      // warning!
      // this id could block the automatic id generation for your sequence!
      // choose the id value wisely
      lCustomer.ID := ID;
      lCustomer.Insert;
      Render201Created('/api/customers/' + lCustomer.ID.ToString);
    finally
      lCustomer.Free;
    end;
  end;
end;

procedure TCustomersController.OnAfterAction(AContext: TWebContext; const AActionName: string);
begin
  ActiveRecordConnectionsRegistry.RemoveDefaultConnection;
  inherited;
end;

end.
